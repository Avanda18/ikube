<project 
    xmlns="http://maven.apache.org/POM/4.0.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation=" http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<artifactId>ikube-war</artifactId>
	<packaging>war</packaging>

	<parent>
		<groupId>ikube</groupId>
		<artifactId>ikube</artifactId>
		<version>3.1.1-SNAPSHOT</version>
		<relativePath>../../pom.xml</relativePath>
	</parent>
	
	<properties>
		<webapps>webapps</webapps>
		<ikube.war>ikube.war</ikube.war>
		<final.name>${project.build.finalName}.${project.packaging}</final.name>
		<maven.build.timestamp.format>dd-MM-yyyy HH:mm:ss</maven.build.timestamp.format>
		<axis.version>1.4</axis.version>
		<jaxrpc.api.version>1.1</jaxrpc.api.version>
		<jersey.version>1.9.1</jersey.version>
		<jaxb-api.version>2.2.1</jaxb-api.version>
		<main.class>ikube.web.Ikube</main.class>
	</properties>

	<build>
		<resources>
			<resource>
				<directory>src/main/java</directory>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<verbose>true</verbose>
					<archive>
						<index>true</index>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<mainClass>${main.class}</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>target/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- The default plugin for creating the war, we specify a version. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.2</version>
			</plugin>
			
			<!-- This plugin runs the unit tests. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.7.1</version>
				<configuration>
					<forkMode>once</forkMode>
					<excludes>
						<exclude>**/*Integration*.java</exclude>
					</excludes>
				</configuration>
			</plugin>
			
			<!-- 
				This plugin reads the properties from the buid.properties file and makes them all available 
				to the rest of the Maven build process. 
			-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0-alpha-1</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>build.properties</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<!-- 
				This plugin	runs an Ant script after the integration tests to deploy ikube.war to the cluster. 
				The cluster directories are also cleaned, all the wars and exploded directories are deleted before 
				the deploy. It will also start the Tomcats in the cluster. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.6</version>
				<executions>
					<execution>
						<id>write-release-info</id>
						<phase>validate</phase>
						<configuration>
							<target>
								<echo message="Writing release file : " />
								<echo file="src/main/webapp/WEB-INF/templates/release.txt" append="false">
									${project.version} - ${maven.build.timestamp}
								</echo>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
					<execution>
						<id>stop-cluster</id>
						<phase>pre-integration-test</phase>
						<configuration>
							<target>
								<!-- Try calling the Tomcats and shut them down. -->
								<echo message="Building the configuration : " />
								<ant antfile="build.xml" target="package.configuration" inheritrefs="true">
									<property name="profile" value="${profile}" />
								</ant>
								<ant antfile="build.xml" target="jar.configuration" inheritrefs="true" />
								<ant antfile="build.xml" target="deploy.configuration.for.jetty" inheritrefs="true" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
					<execution>
						<id>deploy-to-the-cluster</id>
						<phase>install</phase>
						<configuration>
							<target>
								<!-- Rename the wars to ikube.war for convenience. -->
								<echo message="Renaming Ikube war for convenience : " />
								<move file="${target.directory}/${final.name}" tofile="${target.directory}/${ikube.war}" />
								<!-- Zip Ikube and the configuration directory for upload to Google Code -->
								<echo message="Zipping ikube with configuration : " />
								<ant antfile="build.xml" target="zip" inheritrefs="true" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-jsch</artifactId>
						<version>1.8.4</version>
					</dependency>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-commons-net</artifactId>
						<version>1.8.4</version>
					</dependency>
					<dependency>
						<groupId>ant</groupId>
						<artifactId>optional</artifactId>
						<version>1.5.4</version>
					</dependency>
				</dependencies>
			</plugin>
			
			<!-- 
				This plugin starts a Jetty server before the integration tests and stops it after the 
				integration tests. It can also be used to start a jetty server from the command line for testing. 
			-->
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>maven-jetty-plugin</artifactId>
				<version>6.1.25</version>
				<configuration>
					<stopKey>stop</stopKey>
					<stopPort>9081</stopPort>
					<scanIntervalSeconds>10000</scanIntervalSeconds>
					<contextPath>/ikube</contextPath>
					<scanTargets>
						<scanTarget>src/main/resources</scanTarget>
						<scanTarget>src/main/webapp</scanTarget>
					</scanTargets>
					<connectors>
						<connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
							<port>9080</port>
							<maxIdleTime>60000</maxIdleTime>
						</connector>
					</connectors>
				</configuration>
				<executions>
					<!-- <execution>
						<id>start-jetty</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<daemon>true</daemon>
						</configuration>
					</execution>
					<execution>
						<id>stop-jetty</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution> -->
				</executions>
				<dependencies>
					<dependency>
						<!-- 
							XXX It is included to force commons-logging to use 2.5 API instead of 2.3. This caused 
							by internal dependencies of Jetty, which use version 2.5, but have it packaged in a different 
							group ID: org.mortbay.jetty. TODO (Roman): If it gets broken again, try to "exclude" servlet-api 
							dependencies from commons-logging and commons-fileupload. 
						-->
						<groupId>javax.servlet</groupId>
						<artifactId>servlet-api</artifactId>
						<version>2.5</version>
						<scope>compile</scope>
					</dependency>
					<dependency>
						<groupId>commons-logging</groupId>
						<artifactId>commons-logging</artifactId>
						<version>1.1</version>
						<type>jar</type>
					</dependency>
				</dependencies>
			</plugin>
			
			<!-- 
				This plugin will upload the artifacts to Google code, making them available for 
				download. Unfortunately this can't run in the deploy phase because the artifacts are 
				still SNAPSHOTS, which is not what is required as a download. 
			-->
			<plugin>
				<groupId>com.googlecode.maven-gcu-plugin</groupId>
				<artifactId>maven-gcu-plugin</artifactId>
				<executions>
					<execution>
						<id>gcode-upload</id>
						<phase>site</phase>
						<goals>
							<goal>upload</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<serverId>googlecode</serverId>
					<failsOnError>false</failsOnError>
					<projectName>${project.groupId}</projectName>
					<uploads>
						<upload>
							<file>${project.build.directory}/${final.name}</file>
							<summary>${project.groupId} release ${project.version}</summary>
							<labels>
								<label>Featured</label>
								<label>Type-Archive</label>
							</labels>
						</upload>
					</uploads>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>ikube</groupId>
			<artifactId>ikube-core</artifactId>
			<version>${project.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.0</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.1.2</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.mortbay.jetty</groupId>
			<artifactId>jetty</artifactId>
			<!-- <version>7.0.0.v20091005</version> -->
			<version>6.1.11</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.mortbay.jetty</groupId>
			<artifactId>jetty-util</artifactId>
			<!-- <version>7.0.0.v20091005</version> -->
			<version>6.1.11</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-server</artifactId>
			<version>1.0.3</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-multipart</artifactId>
            <version>1.0.3</version>
            <scope>compile</scope>
        </dependency>
		<dependency>
			<groupId>com.sun.jersey.contribs</groupId>
			<artifactId>jersey-spring</artifactId>
			<version>1.0.1</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-beans</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-context</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-web</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.1.9</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>jsr311-api</artifactId>
			<version>1.0</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-jsp</artifactId>
			<version>2.2.2</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

</project>