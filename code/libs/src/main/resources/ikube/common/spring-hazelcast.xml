<?xml version="1.0" encoding="UTF-8"?>

<!--suppress ALL -->
<beans
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:property="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:hz="http://www.hazelcast.com/schema/spring"

    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.hazelcast.com/schema/spring
        http://www.hazelcast.com/schema/spring/hazelcast-spring-3.1.xsd">

    <description>This is the configuration for the Hazelcast grid</description>

    <context:spring-configured/>
    <context:annotation-config/>
    <context:component-scan base-package="ikube"/>

    <!-- Hazelcast Instance configuration -->
    <!--suppress UnparsedCustomBeanInspection -->
    <hz:hazelcast id="ikube-hazelcast">
        <hz:config>
            <!-- Hazelcast Instance Name -->
            <hz:instance-name>${hz-instance-name}</hz:instance-name>
            <!-- Hazelcast Group Name and Password -->
            <hz:group name="${hz-group-name}" password="${hz-group-password}"/>
            <!-- Hazelcast Management Center URL -->
            <hz:management-center enabled="${hz-management-center-enabled}" url="${hz-management-center-url}"/>
            <hz:properties>
                <hz:property name="hazelcast.redo.wait.millis">15000</hz:property>
                <hz:property name="hazelcast.operation.call.timeout.millis">600000</hz:property>
                <hz:property name="hazelcast.redo.giveup.threshold">10</hz:property>
                <!--<hz:property name="hazelcast.redo.giveup.threshold">1000</hz:property>-->
                <hz:property name="hazelcast.max.operation.timeout">600000</hz:property>
                <!--<hz:property name="hazelcast.socket.bind.any">true</hz:property>-->
                <hz:property name="hazelcast.icmp.enabled">true</hz:property>
                <!--<hz:property name="hazelcast.elastic.memory.enabled">true</hz:property>-->
            </hz:properties>
            <!-- Hazelcast Tcp based network configuration -->
            <hz:network port="${hz-network-port}" port-auto-increment="${hz-network-port-auto-increment}">
                <hz:join>
                    <hz:multicast enabled="${hz-multicast-enabled}" multicast-group="${hz-multicast-group}" multicast-port="8050"/>
                    <hz:tcp-ip enabled="${hz-tcp-ip-enabled}">
                        <hz:members>${hz-members}</hz:members>
                    </hz:tcp-ip>
                </hz:join>
                <hz:interfaces enabled="${hz-interfaces-enabled}">
                    <hz:interface>${hz-tcp-ip-interface}</hz:interface>
                </hz:interfaces>
            </hz:network>
            <!-- Hazelcast Distributed Map configuration -->
            <hz:map
                name="${hz-search-map}"
                backup-count="${hz-map-backup-count}"
                max-size="${hz-map-max-size}"
                eviction-percentage="${hz-map-eviction-percentage}"
                read-backup-data="${hz-map-read-backup-data}"
                eviction-policy="${hz-map-eviction-policy}"
                merge-policy="${hz-map-merge-policy}"
                async-backup-count="${hz-async-backup-count}"
                max-idle-seconds="${hz-max-idle-seconds}"
                time-to-live-seconds="${hz-time-to-live-seconds}"
                statistics-enabled="true">
                <hz:map-store
                    enabled="${hz-map-store-enabled}"
                    write-delay-seconds="${hz-map-store-write-delay}"
                    implementation="ikube.cluster.hzc.ClusterManagerCacheSearch">
                </hz:map-store>
            </hz:map>
            <hz:topic name="topic">
                <hz:message-listeners>
                    <hz:message-listener implementation="ikube.cluster.listener.hzc.StartListener"/>
                    <hz:message-listener implementation="ikube.cluster.listener.hzc.StopListener"/>
                    <hz:message-listener implementation="ikube.cluster.listener.hzc.DeleteListener"/>
                    <hz:message-listener implementation="ikube.cluster.listener.hzc.CpuLoadListener"/>
                    <hz:message-listener implementation="ikube.cluster.listener.hzc.SnapshotListener"/>
                </hz:message-listeners>
            </hz:topic>
        </hz:config>
    </hz:hazelcast>
    <bean
        id="ikube.cluster.hzc.ClusterManagerCacheSearch"
        class="ikube.cluster.hzc.ClusterManagerCacheSearch"
        depends-on="ikube.database.IDataBase">
    </bean>
    <bean
        id="ikube.cluster.listener.hzc.StartListener"
        class="ikube.cluster.listener.hzc.StartListener"/>
    <bean
        id="ikube.cluster.listener.hzc.StopListener"
        class="ikube.cluster.listener.hzc.StopListener"/>
    <bean
        id="ikube.cluster.listener.hzc.DeleteListener"
        class="ikube.cluster.listener.hzc.DeleteListener"/>
    <bean
        id="ikube.cluster.listener.hzc.CpuLoadListener"
        class="ikube.cluster.listener.hzc.CpuLoadListener"/>
    <bean
        id="ikube.cluster.listener.hzc.SnapshotListener"
        class="ikube.cluster.listener.hzc.SnapshotListener"/>

    <!-- depends-on="ikube-hazelcast" -->
    <bean
        id="ClusterManagerOutOfMemoryHandler"
        class="ikube.cluster.hzc.ClusterManagerOutOfMemoryHandler"/>
    <bean
        id="ikube.cluster.IClusterManager"
        class="ikube.cluster.hzc.ClusterManagerHazelcast"
        lazy-init="false"
        init-method="initialize"
        destroy-method="destroy"/>

</beans>