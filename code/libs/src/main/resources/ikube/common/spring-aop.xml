<?xml version="1.0" encoding="UTF-8"?>

<beans
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:property="http://www.springframework.org/schema/p"
	xmlns:transaction="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"

	xsi:schemaLocation="
			http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd">
            
	<description>
		This file is not to be modified by users generally.
		This is the configuration for the intercepter for the rules.
	</description>
	
	<aop:config proxy-target-class="true" />
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!--
		This bean will intercept the actions, execute the rules that are associated with the 
		actions, and based on the results from the execution of the rules and the evaluation 
		of the boolean rule expression execute the action or not. 
	 -->
	<bean 
		id="ikube.action.rule.IRuleInterceptor" 
		class="ikube.action.rule.RuleInterceptor" />
	<!-- 
		This interceptor will intercept the handlers. The indexable isthen accessed and the strategies are executed
		to determine whether to process the resource or not. The chain of strategies must result in a true return value
		for the handler to proceed with the processing, otherwise the resource will not get processed.
		
		The application of this is in the delta indexing where the strategies will look for a timestamp in the current index. If 
		it is there then the resource is not indexed as the latest version is already in the index, if not then the resource is deleted 
		from the index by the strategy and the handler is allowed to proceed with indexing the resource, i.e. the current /latest 
		version of the document.
		
		The second use case for this interceptor is adding data to the resource whilst indexing. For example if there are
		ros in the database that are linked to the file system, i.e. one of columns contains a path to a file, and the user wants 
		to index the file along with the row, then the strategy will go to the file system and get the file, then add it to the document
		before passing control back to the handler.
		
		Note that the strategies are to be defined on the indexables, not on the handlers. 
	 -->
	<bean 
		id="ikube.action.index.handler.strategy.IStrategyInterceptor" 
		class="ikube.action.index.handler.strategy.StrategyInterceptor" />
	<!--
		This interceptor will execute logic before and after processing the action. In the case of the delta indexing 
		the preProcess will create an index of the resources in the index that will be used to ignore resources that have
		not become outdated and to re-index resources that are out of date. 
	 -->
	 
	<!-- The aop point cuts for the interceptors. -->
	<aop:config proxy-target-class="true">
		<aop:aspect ref="ikube.action.rule.IRuleInterceptor">
			<aop:around method="decide" pointcut="execution(* ikube.action.*.execute(..))"  />
		</aop:aspect>
		<aop:aspect ref="ikube.action.index.handler.strategy.IStrategyInterceptor">
			<aop:around method="aroundProcess" pointcut="execution(* ikube.action.index.handler.*.handleResource*(..))"  />
		</aop:aspect>
		<aop:aspect ref="ikube.action.index.handler.strategy.IStrategyInterceptor">
			<aop:around method="aroundProcess" pointcut="execution(* ikube.action.index.handler.*.*.handleResource*(..))"  />
		</aop:aspect>
	</aop:config>
	
</beans>