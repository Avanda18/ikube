<?xml version="1.0" encoding="UTF-8"?>

<!--suppress SpringBeanNameConventionInspection -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:property="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"

       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- START CLUSTERER DEFINITION: -->
    <!--
        This is the ikube wrapper for the Weka clustering algorithm. This wrapper can
         be applied to any algorithm, in any language. The default implementation is Weka
         at the time of writing.
    -->
    <bean id="analyzer-em" name="analyzer-em" class="ikube.analytics.weka.WekaClusterer"/>
    <!--
        This is the context for the analyzer. It will 'wire' all the pieces together, specifically
        the wrapper for the Weka algorithm, the algorithm, some options if there are any for the algorithm. Additionally
        it contains a unique name for accessing it from the web services, and the maximum training instances that the
        analyzer will tolerate. Also(optional) is the name of the file used for the training. If no file is specified
        then the name concatenated with '.arff' will be used to look for the file recursively starting from the base configuration
        folder.
    -->
    <bean
        id="context-em"
        name="context-em"
        class="ikube.model.Context"
        property:name="bank-data"
        property:analyzer-ref="analyzer-em"
        property:algorithms="weka.clusterers.EM"
        property:options-ref="context-em-options"
        property:fileNames="bank-data.arff"
        property:maxTrainings="10000"/>
    <util:list id="context-em-options">
        <value type="java.lang.String">-V</value>
        <value type="java.lang.String">3</value>
    </util:list>
    <!-- END CLUSTERER DEFINITION: -->

    <!-- START CLASSIFIER DEFINITION: -->
    <!--
        This is the ikube wrapper for the Weka classification algorithm. This wrapper can
         be applied to any algorithm, in any language. The default implementation is Weka
         at the time of writing.
    -->
    <bean id="analyzer-smo" name="analyzer-smo" class="ikube.analytics.weka.WekaClassifier"/>
    <!--
        This is the context for the analyzer. It will 'wire' all the pieces together, specifically
        the wrapper for the Weka algorithm, the algorithm, some options if there are any for the algorithm. Additionally
        it contains a unique name for accessing it from the web services, and the maximum training instances that the
        analyzer will tolerate. Also(optional) is the name of the file used for the training. If no file is specified
        then the name concatenated with '.arff' will be used to look for the file recursively starting from the base configuration
        folder.
    -->
    <bean
        id="context-smo"
        name="context-smo"
        class="ikube.model.Context"
        property:name="sentiment-smo"
        property:analyzer-ref="analyzer-smo"
        property:filters="weka.filters.unsupervised.attribute.StringToWordVector"
        property:algorithms="weka.classifiers.functions.SMO"
        property:fileNames="sentiment-smo.arff"
        property:maxTrainings="10000"/>
    <!-- END CLASSIFIER DEFINITION: -->

    <!-- This context contains 1.5 million human classified sentences to train the classifiers. -->
    <bean
        name="english-sentiment"
        class="ikube.model.Context"
        property:name="english-sentiment"
        property:analyzer="ikube.analytics.weka.WekaClassifier"
        property:options="-D"
        property:persisted="false">

        <property name="algorithms">
            <list>
                <value>weka.classifiers.bayes.NaiveBayesMultinomial</value>
                <value>weka.classifiers.bayes.NaiveBayesMultinomial</value>
                <value>weka.classifiers.bayes.NaiveBayesMultinomial</value>
                <value>weka.classifiers.bayes.NaiveBayesMultinomial</value>
                <value>weka.classifiers.bayes.NaiveBayesMultinomial</value>
                <value>weka.classifiers.bayes.NaiveBayesMultinomial</value>
                <value>weka.classifiers.bayes.NaiveBayesMultinomial</value>
                <value>weka.classifiers.bayes.NaiveBayesMultinomial</value>
                <value>weka.classifiers.bayes.NaiveBayesMultinomial</value>
                <value>weka.classifiers.bayes.NaiveBayesMultinomial</value>
            </list>
        </property>

        <property name="fileNames">
            <list>
                <value>sentiment-model-150000-300000.arff</value>
                <value>sentiment-model-300000-450000.arff</value>
                <value>sentiment-model-450000-600000.arff</value>
                <value>sentiment-model-600000-750000.arff</value>
                <value>sentiment-model-750000-900000.arff</value>
                <value>sentiment-model-900000-1050000.arff</value>
                <value>sentiment-model-1050000-1200000.arff</value>
                <value>sentiment-model-1200000-1350000.arff</value>
                <value>sentiment-model-1350000-1500000.arff</value>
                <value>sentiment-model-1500000-1650000.arff</value>
            </list>
        </property>

        <property name="filters">
            <list>
                <value>weka.filters.unsupervised.attribute.StringToWordVector</value>
                <value>weka.filters.unsupervised.attribute.StringToWordVector</value>
                <value>weka.filters.unsupervised.attribute.StringToWordVector</value>
                <value>weka.filters.unsupervised.attribute.StringToWordVector</value>
                <value>weka.filters.unsupervised.attribute.StringToWordVector</value>
                <value>weka.filters.unsupervised.attribute.StringToWordVector</value>
                <value>weka.filters.unsupervised.attribute.StringToWordVector</value>
                <value>weka.filters.unsupervised.attribute.StringToWordVector</value>
                <value>weka.filters.unsupervised.attribute.StringToWordVector</value>
                <value>weka.filters.unsupervised.attribute.StringToWordVector</value>
            </list>
        </property>

        <property name="maxTrainings">
            <list>
                <value>1000000</value>
                <value>1000000</value>
                <value>1000000</value>
                <value>1000000</value>
                <value>1000000</value>
                <value>1000000</value>
                <value>1000000</value>
                <value>1000000</value>
                <value>1000000</value>
                <value>1000000</value>
            </list>
        </property>
    </bean>

    <bean
        name="neuroph-neural-network"
        class="ikube.model.Context"
        property:name="neuroph-neural-network"
        property:analyzer="ikube.analytics.neuroph.NeurophAnalyzer"
        property:algorithms="org.neuroph.nnet.MultiLayerPerceptron"
        property:models-ref="neuroph-neural-network-models"
        property:options-ref="neuroph-neural-network-options"/>

    <util:list id="neuroph-neural-network-options">
        <value type="java.lang.String">-label</value>
        <value type="java.lang.String">neuroph-neural-network</value>

        <value type="java.lang.String">-inputNeuronsCount</value>
        <value type="java.lang.String">3</value>

        <value type="java.lang.String">-hiddenNeuronsCount</value>
        <value type="java.lang.String">3</value>

        <value type="java.lang.String">-outputNeuronsCount</value>
        <value type="java.lang.String">2</value>

        <value type="java.lang.String">-neuronsInLayers</value>
        <value type="java.lang.String">[3, 3, 2]</value>

        <value type="org.neuroph.util.TransferFunctionType">TANH</value>
        <bean
            id="backPropagation"
            class="org.neuroph.nnet.learning.BackPropagation"
            property:maxIterations="1000">
        </bean>
    </util:list>

    <util:list id="neuroph-neural-network-models">
        <ref local="neuroph-neural-network-model"/>
    </util:list>

    <bean
        id="neuroph-neural-network-model"
        class="org.neuroph.core.data.DataSet">
        <constructor-arg index="0" value="3"/>
        <constructor-arg index="1" value="2"/>
    </bean>
    <bean
        id="neuroph-neural-network-model-row"
        class="org.neuroph.core.data.DataSetRow">
        <constructor-arg index="0" type="double[]">
            <list>
                <value>1.0</value>
                <value>0.0</value>
                <value>1.0</value>
            </list>
        </constructor-arg>
        <constructor-arg index="1" type="double[]">
            <list>
                <value>1.0</value>
                <value>0.0</value>
            </list>
        </constructor-arg>
    </bean>

    <bean id="data" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="neuroph-neural-network-model" />
        <property name="targetMethod" value="addRow"/>
        <property name="arguments">
            <array>
                <ref local="neuroph-neural-network-model-row"/>
            </array>
        </property>
    </bean>

</beans>