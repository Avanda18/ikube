package ikube.action;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import ikube.AbstractTest;
import ikube.mock.IndexReaderMock;
import ikube.toolkit.FileUtilities;

import java.io.File;

import mockit.Deencapsulation;

import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.store.Lock;
import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.mockito.Mockito;

/**
 * @author Michael Couck
 * @since 21.11.10
 * @version 01.00
 */
public class OpenTest extends AbstractTest {

	private Open open;

	@Before
	public void before() {
		open = new Open();
		Deencapsulation.setField(open, clusterManager);
		FileUtilities.deleteFile(new File(indexContext.getIndexDirectoryPath()), 1);
	}

	@After
	public void after() throws Exception {
		FileUtilities.deleteFile(new File(indexContext.getIndexDirectoryPath()), 1);
	}

	@Test
	public void noIndex() throws Exception {
		boolean opened = open.execute(indexContext);
		assertFalse("There should be no index to open : ", opened);
	}

	/** We open on locked directories now. */
	@Test
	@Ignore
	public void indexLocked() throws Exception {
		File latestIndexDirectory = createIndexFileSystem(indexContext, "and the data in the index");
		File serverIndexDirectory = new File(latestIndexDirectory.getAbsolutePath());
		Directory directory = FSDirectory.open(serverIndexDirectory);

		Lock lock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);
		lock.obtain(Lock.LOCK_OBTAIN_WAIT_FOREVER);

		boolean opened = open.execute(indexContext);
		Mockito.when(indexContext.isDelta()).thenReturn(Boolean.FALSE);
		assertFalse("The index should not have been opened because the directory is locked : ", opened);

		lock.release();
		directory.clearLock(IndexWriter.WRITE_LOCK_NAME);
	}

	@Test
	public void indexUnlocked() throws Exception {
		createIndexFileSystem(indexContext, "and the data in the index");
		IndexReaderMock.setIndexExists(Boolean.TRUE);
		boolean opened = open.execute(indexContext);
		assertTrue("The index should have been opened because the directory is now unlocked : ", opened);
	}

	@Test
	public void multipleIndexes() {
		createIndexesFileSystem(indexContext, System.currentTimeMillis(),
				new String[] { "192.168.1.8.1", "192.168.1.8.2", "192.168.1.8.3" }, "and the data in the index");
		boolean opened = open.internalExecute(indexContext);
		assertTrue("The index should be open on several indexes : ", opened);
	}

}