package ikube.action;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import ikube.ATest;
import ikube.listener.ListenerManager;
import ikube.mock.ApplicationContextManagerMock;
import ikube.mock.IndexReaderMock;
import ikube.mock.IndexSearcherMock;
import ikube.mock.MultiSearcherMock;
import ikube.toolkit.FileUtilities;

import java.io.File;
import java.io.IOException;

import mockit.Cascading;
import mockit.Deencapsulation;
import mockit.Mockit;

import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.store.Lock;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * @author Michael Couck
 * @since 21.11.10
 * @version 01.00
 */
public class OpenTest extends ATest {

	private Open open;
	@Cascading
	private ListenerManager listenerManager;

	public OpenTest() {
		super(OpenTest.class);
	}

	@Before
	public void before() {
		open = new Open();
		Deencapsulation.setField(open, clusterManager);
		FileUtilities.deleteFile(new File(indexContext.getIndexDirectoryPath()), 1);
	}

	@After
	public void after() throws Exception {
		Mockit.tearDownMocks();
		FileUtilities.deleteFile(new File(indexContext.getIndexDirectoryPath()), 1);
	}

	@Test
	public void noIndex() throws IOException {
		Mockit.setUpMocks(ApplicationContextManagerMock.class, IndexSearcherMock.class, IndexReaderMock.class, MultiSearcherMock.class);
		boolean opened = open.execute(indexContext);
		assertFalse("There should be no index to open : ", opened);
	}

	@Test
	public void indexLocked() throws IOException {
		File latestIndexDirectory = createIndex(indexContext, "and the data in the index");
		File serverIndexDirectory = new File(latestIndexDirectory, ip);
		Directory directory = FSDirectory.open(serverIndexDirectory);
		Lock lock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);
		lock.obtain(Lock.LOCK_OBTAIN_WAIT_FOREVER);

		Mockit.setUpMocks(ApplicationContextManagerMock.class, IndexSearcherMock.class, IndexReaderMock.class, MultiSearcherMock.class);
		boolean opened = open.execute(indexContext);
		Mockit.tearDownMocks();
		assertFalse("The index should not have been opened because the directory is locked : ", opened);

		lock.release();
		directory.clearLock(IndexWriter.WRITE_LOCK_NAME);
	}

	@Test
	public void indexUnlocked() throws IOException {
		createIndex(indexContext, "and the data in the index");
		Mockit.setUpMocks(ApplicationContextManagerMock.class, IndexSearcherMock.class, IndexReaderMock.class, MultiSearcherMock.class);
		IndexReaderMock.setIndexExists(Boolean.TRUE);
		Deencapsulation.setField(open, listenerManager);
		boolean opened = open.execute(indexContext);
		assertTrue("The index should have been opened because the directory is now unlocked : ", opened);
	}

}
