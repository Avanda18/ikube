package ikube.action;

import java.io.File;

import org.apache.lucene.search.IndexSearcher;
import org.junit.After;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Spy;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.verify;
import ikube.AbstractTest;
import ikube.toolkit.FileUtilities;

/**
 * @author Michael Couck
 * @version 01.00
 * @since 21-11-2010
 */
public class OpenTest extends AbstractTest {

	@Spy
	@InjectMocks
	private Open open;

	@After
	public void after() throws Exception {
		FileUtilities.deleteFile(new File(indexContext.getIndexDirectoryPath()));
	}

	@Test
	public void noIndex() throws Exception {
		boolean opened = open.execute(indexContext);
		assertFalse("There should be no index to open : ", opened);
	}

	@Test
	public void indexUnlocked() throws Exception {
		open = new Open();
		createIndexFileSystem(indexContext, "and the data in the index");
		boolean opened = open.execute(indexContext);
		assertTrue("The index should have been opened because the directory is now unlocked : ", opened);
	}

	@Test
	public void multipleIndexes() throws Exception {
		createIndexesFileSystem(indexContext, System.currentTimeMillis(),
				new String[] { "192.168.1.8.1", "192.168.1.8.2", "192.168.1.8.3" }, "and the data in the index");
		boolean opened = open.internalExecute(indexContext);
		assertTrue("The index should be open on several indexes : ", opened);
		verify(indexContext, atLeastOnce()).setMultiSearcher(any(IndexSearcher.class));
	}

}