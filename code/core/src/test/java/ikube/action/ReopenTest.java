package ikube.action;

import ikube.AbstractTest;
import ikube.IConstants;
import ikube.action.index.IndexManager;
import ikube.model.IndexContext;
import ikube.toolkit.FILE;
import ikube.toolkit.THREAD;
import org.apache.lucene.index.IndexWriter;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;

import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertTrue;

/**
 * @author Michael Couck
 * @version 01.00
 * @since 21-11-2010
 */
@SuppressWarnings("deprecation")
public class ReopenTest extends AbstractTest {

    private Reopen reopen;
    private IndexContext indexContext;

    @Before
    public void before() {
        reopen = new Reopen();
        indexContext = new IndexContext();
        indexContext.setDelta(Boolean.TRUE);
        indexContext.setName(IConstants.INDEX_CONTEXT);
        indexContext.setIndexDirectoryPath(indexDirectoryPath);
        indexContext.setIndexDirectoryPathBackup(indexDirectoryPath);

        indexContext.setBatchSize(1000);
        indexContext.setBufferedDocs(1000);
        indexContext.setBufferSize(128);
        indexContext.setCompoundFile(Boolean.TRUE);
        indexContext.setMergeFactor(1000);

        FILE.deleteFile(new File(indexDirectoryPath));
    }

    @After
    public void after() throws Exception {
        FILE.deleteFile(new File(indexContext.getIndexDirectoryPath()));
    }

    @Test
    public void internalExecute() throws Exception {
        createIndexFileSystem(indexContext, "Hello world");

        // First open the index
        new Open().execute(indexContext);

        IndexWriter[] indexWriters = IndexManager.openIndexWriterDelta(indexContext);
        indexContext.setIndexWriters(indexWriters);

        // Add some documents to the index and reopen
        addDocuments(indexWriters[0], IConstants.CONTENTS, "Michael Couck");
        boolean opened = reopen.execute(indexContext);
        assertTrue("The index should be open : ", opened);
        int docs = indexContext.getMultiSearcher().getIndexReader().numDocs();

        internalExecute(indexContext, docs);

        docs = indexContext.getMultiSearcher().getIndexReader().numDocs();
        internalExecute(indexContext, docs);

        docs = indexContext.getMultiSearcher().getIndexReader().numDocs();
        internalExecute(indexContext, docs);

        docs = indexContext.getMultiSearcher().getIndexReader().numDocs();
        internalExecute(indexContext, docs);

        docs = indexContext.getMultiSearcher().getIndexReader().numDocs();
        internalExecute(indexContext, docs);

        docs = indexContext.getMultiSearcher().getIndexReader().numDocs();
        internalExecute(indexContext, docs);
    }

    private void internalExecute(final IndexContext indexContext, final int numDocsBefore) throws Exception {
        // Add some more documents to the index and reopen
        addDocuments(indexContext.getIndexWriters()[0], IConstants.CONTENTS, "Michael Couck again");
        boolean opened = reopen.execute(indexContext);
        assertTrue("The index should be open : ", opened);
        int moreDocs = indexContext.getMultiSearcher().getIndexReader().numDocs();

        assertNotSame("There should be more documents in the new multi searcher : ", numDocsBefore, moreDocs);
    }

    @Test
    public void memoryValidation() throws Exception {
        IndexWriter[] indexWriters = IndexManager.openIndexWriterDelta(indexContext);
        indexContext.setIndexWriters(indexWriters);

        // Now add documents and reopen again and again
        System.gc();
        int iterations = 1000;
        long before = (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / IConstants.MILLION;
        for (int i = iterations; i >= 0; i--) {
            if (i > 0 && i % 100 == 0) {
                indexWriters[0].commit();
                indexWriters[0].forceMerge(10, Boolean.TRUE);
                new Reopen().execute(indexContext);
                printMemoryDelta(before);
            }
            addDocuments(indexWriters[0], IConstants.CONTENTS, "Michael Couck again");
            THREAD.sleep(1);
        }
        printMemoryDelta(before);
        long after = (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / IConstants.MILLION;
        long increase = (after - before);
        assertTrue(increase < 100);
    }

}